#!/bin/sh
_=[[
exec crun --lua "$0" "$@"
]]
-- The following code is written in Lua.

local json = require "json"
local httpclient = require "httpclient"

-- Functions
local function parseCSVLine(line) 
    local res = {}
    local pos = 1
    sep = sep or ','
    while true do 
        local c = string.sub(line,pos,pos)
        if (c == "") then break end
        local startp,endp = string.find(line, ',', pos)
        if (startp) then 
            table.insert(res, string.sub(line, pos, startp-1))
            pos = endp + 1
        else
            -- no separator found -> use rest of string and terminate
            table.insert(res, string.sub(line, pos))
            break
        end 
    end
    return res
end

local function hasValue(tab, val)
    for i, v in ipairs(tab) do
        if v == val then
            return true
        end
    end
    return false
end

-- Parse options loosely. Example: '-a=one --aa=two -b three --bb four'. Do NOT support boolean option.
local options = {}
for i, v in ipairs(arg) do
    if string.sub(v, 1, 2) == "--" or string.sub(v, 1, 1) == "-" then
        local l = 2
        if string.sub(v, 1, 2) == "--" then
            l = 3
        end

        local x = string.find(v, "=", 1, true)
        if x then 
            options[string.sub(v, l, x-1)] = string.sub(v, x+1)
        else
            local _, vv = next(arg, i)
            options[string.sub(v, l)] = vv
        end
    end
end

if not os.getenv("CRUN_HANDLER_TYPE") then 
    print([[Usage: crun-handler-slack

Crun handler for sending a report to slack.

Options:
  --url <URL>             Incoming Webhook URL. This option is required.
  --channel <channel>     Channel.
  --username <username>   Username.
  --text <text>           Text. Default 'Reported by crun-handler-slack'.
  --color <color>         Color code. (ex '#32B232'.
  --items <items>         Select reporting items by Comma-Separated Values. Default 'all'.
                          Example: Stdout,Stderr,ExitCode
                          Supported items:
                            Command
                            CommandArgs
                            Tag
                            Output
                            Stdout
                            Stderr
                            ExitCode
                            Result
                            Pid
                            StartAt
                            EndAt
                            Hostname
                            SystemTime
                            UserTime

Examples:
  crun --post='crun-handler-slack --url=https://hooks.slack.com/xxxxxx' -- echo helloworld!

Description:
  This command must be used as CRUN (https://github.com/kohkimakimoto/crun) handler.

]])
    os.exit(1)
end

local report = json.decode(io.read("*a"))

-- Incoming Webhook URL
local url      = options.url or error("require '--url'")
local channel  = options.channel
local username = options.username
local text     = options.text or "Reported by crun-handler-slack"
local color    = options.color
local items    = parseCSVLine(options.items or 'all')

local fields = {}
if report.command and (hasValue(items, 'all') or hasValue(items, 'Command'))then
    table.insert(fields, {
        title = "Command",
        value = report.command,
    })
end

if report.commandArgs and (hasValue(items, 'all') or hasValue(items, 'CommandArgs'))then
    table.insert(fields, {
        title = "CommandArgs",
        value = json.encode(report.commandArgs),
    })
end

if report.tag and (hasValue(items, 'all') or hasValue(items, 'Tag'))then
    table.insert(fields, {
        title = "Tag",
        value = report.tag,
    })
end

if report.output and (hasValue(items, 'all') or hasValue(items, 'Output'))then
    table.insert(fields, {
        title = "Output",
        value = report.output,
    })
end

if report.stdout and (hasValue(items, 'all') or hasValue(items, 'Stdout'))then
    table.insert(fields, {
        title = "Stdout",
        value = report.stdout,
    })
end

if report.stderr and (hasValue(items, 'all') or hasValue(items, 'Stderr'))then
    table.insert(fields, {
        title = "Stderr",
        value = report.stderr,
    })
end

if report.exitCode and (hasValue(items, 'all') or hasValue(items, 'ExitCode'))then
    table.insert(fields, {
        title = "ExitCode",
        value = report.exitCode,
    })
end

if report.result and (hasValue(items, 'all') or hasValue(items, 'Result'))then
    table.insert(fields, {
        title = "Result",
        value = report.result,
    })
end

if report.pid and (hasValue(items, 'all') or hasValue(items, 'Pid'))then
    table.insert(fields, {
        title = "Pid",
        value = report.pid,
    })
end

if report.startAt and (hasValue(items, 'all') or hasValue(items, 'StartAt'))then
    table.insert(fields, {
        title = "StartAt",
        value = report.startAt,
    })
end

if report.endAt and (hasValue(items, 'all') or hasValue(items, 'EndAt'))then
    table.insert(fields, {
        title = "EndAt",
        value = report.endAt,
    })
end

if report.hostname and (hasValue(items, 'all') or hasValue(items, 'Hostname'))then
    table.insert(fields, {
        title = "Hostname",
        value = report.hostname,
    })
end

if report.systemTime and (hasValue(items, 'all') or hasValue(items, 'SystemTime'))then
    table.insert(fields, {
        title = "SystemTime",
        value = report.systemTime,
    })
end

if report.userTime and (hasValue(items, 'all') or hasValue(items, 'UserTime'))then
    table.insert(fields, {
        title = "UserTime",
        value = report.userTime,
    })
end

local msg = json.encode({
    channel = channel,
    username = username,
    text = text,
    attachments = {
        {
            color = color,
            fields = fields,
        },
    },
})

local resp, err = httpclient.post(url, {
    headers = {
        ['Content-type'] = "application/json"
    },
    body = msg,
})
if err then
    error(err)
end
